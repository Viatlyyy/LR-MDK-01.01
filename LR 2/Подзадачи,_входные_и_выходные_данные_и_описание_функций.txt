Лабораторная работа №2, Вариант 7
Описание этапов решения задачи

Описание подзадач решения:

1. Структура данных: определение класса Product для хранения информации о товаре (название, категория, история цен).
2. Заполнение данных: создание начальных данных о товарах (ручное заполнение в DataFetchingStep).
3. Запрос категории: получение от пользователя категории товара для поиска.
4. Поиск товаров: фильтрация списка товаров для получения только тех, которые относятся к указанной категории.
5. Расчет средней цены: вычисление средней цены для каждого товара на основе его истории цен (без использования LINQ).
6. Сортировка товаров: сортировка списка товаров по убыванию средней цены (с использованием алгоритма "пузырьковой сортировки", без LINQ).
7. Вывод результатов: вывод на экран списка товаров, отсортированных по средней цене.

Описание входных/выходных данных для каждой подзадачи:

1. Структура данных:
   Входные данные: нет
   Выходные данные: класс Product с полями Name (string), Category (string), PriceHistory (List<decimal>).
2. Заполнение данных:
   Входные данные: нет
   Выходные данные: список товаров (List<Product>) с заполненными данными.
3. Запрос категории:
   Входные данные: нет
   Выходные данные: строка (string) с категорией, введенной пользователем.
4. Поиск товаров:
   Входные данные: строка (string) с категорией, список всех товаров (List<Product>).
   Выходные данные: список товаров (List<Product>), относящихся к указанной категории.
5. Расчет средней цены:
   Входные данные: список цен (List<decimal>).
   Выходные данные: число (decimal) - средняя цена товара.
6. Сортировка товаров:
   Входные данные: список товаров (List<Product>).
   Выходные данные: отсортированный список товаров (List<Product>) по убыванию средней цены.
7. Вывод результатов:
   Входные данные: отсортированный список товаров (List<Product>).
   Выходные данные: вывод на консоль списка товаров с названиями и средней ценой.

Определение функций:

class Product:
   string Name { get; set; }
   string Category { get; set; }
   List<decimal> PriceHistory { get; set; }

class DataFetchingStep:
   List<Product> GetProductData()
      

  class CategoryRequestStep:
   string RequestCategory()
       

class ProductSearchStep:
   List<Product> FindProductsByCategory(string category, List<Product> allProducts)
        
class AveragePriceCalculationStep:
   decimal CalculateAveragePrice(List<decimal> prices)
        

class ProductSortingStep:
   List<Product> SortProducts(List<Product> products)
       
class Program:
   static void Main(string[] args)
      
